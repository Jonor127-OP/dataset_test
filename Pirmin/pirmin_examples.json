{
"packages" : ["numpy", "math", "pandas", "string", "datetime", "json", "itertools", "random", "functools", "collections"],
"labels" : ["assign", "builtin", "func", "cond", "loop", "str", "list", "dict", "set", "multiline", "recursive", "multiplefunc", "mathprob", "multipletask", "lambdafunc"],
"usable" : ["yes", "no"],
"data" : [{"question_id": 0, "intent": "Get the immediate minimum among a list of numbers in python ", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "https://stackoverflow.com/questions/29471884", "templates": []},
{"question_id": 1, "intent": "Pythonic way to get the largest item in a list ", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "https://stackoverflow.com/questions/1874194", "templates": []},
{"question_id": 2, "intent": "How to convert 'binary string' to normal string in Python3?", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "   https://stackoverflow.com/questions/17615414", "templates": []},
{"question_id": 3, "intent": "Python Pandas Pivot Table", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "   https://stackoverflow.com/questions/9550867", "templates": []},
  {"question_id": 4, "intent": "Pandas DataFrame Groupby two columns and get counts ", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "   https://stackoverflow.com/questions/17679089", "templates": []},
  {"question_id": 5,"intent": "Converting html to text with Python ", "code": "https://stackoverflow.com/questions/14694482", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "html", "web-scraping", "text", "beautifulsoup"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/14694482", "id_so": 14694482, "type": "SO_mined"},
  {"question_id": 6,"intent": "Parse_dates in Pandas  ", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "datetime", "pandas"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/23797491", "id_so": 23797491, "type": "SO_mined", "code": "https://stackoverflow.com/questions/23797491"},
  {"question_id": 7,"intent": "How to add an element to the beginning of an OrderedDict?  ", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "python-3.x", "dictionary", "python-2.x", "ordereddict"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/16664874", "id_so": 16664874, "type": "SO_mined", "code": " https://stackoverflow.com/questions/16664874"},
  {"question_id": 8,"intent": "Find an element in a list of tuples ", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "list", "search", "tuples"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/2191699", "id_so": 2191699, "type": "SO_mined", "code": " https://stackoverflow.com/questions/2191699"},
  {"question_id": 9,"intent": "How to extract elements from a list using indices in Python?   ", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "list"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/2621674", "id_so": 2621674, "type": "SO_mined", "code": "https://stackoverflow.com/questions/2621674"},
  {"question_id": 10, "intent": "Python \"extend\" for a dictionary", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "https://stackoverflow.com/questions/577234", "templates": []},
{"question_id": 11, "intent": "add a string prefix to each value in a string column using Pandas   https://stackoverflow.com/questions/20025882", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "df['col'] = 'str' + df['col'].astype(str)\n\nExample:\n>>> df = pd.DataFrame({'col':['a',0]})\n>>> df\n  col\n0   a\n1   0\n>>> df['col'] = 'str' + df['col'].astype(str)\n>>> df\n    col\n0  stra\n1  str0\n\n;;;As an alternative, you can also use an apply combined with format (or better with f-strings) which I find slightly more readable if one e.g. also wants to add a suffix or manipulate the element itself:\ndf = pd.DataFrame({'col':['a', 0]})\n\ndf['col'] = df['col'].apply(lambda x: \"{}{}\".format('str', x))\n\nwhich also yields the desired output:\n    col\n0  stra\n1  str0\n\nIf you are using Python 3.6+, you can also use f-strings:\ndf['col'] = df['col'].apply(lambda x: f\"str{x}\")\n\nyielding the same output.\nThe f-string version is almost as fast as @RomanPekar's solution (python 3.6.4):\ndf = pd.DataFrame({'col':['a', 0]*200000})\n\n%timeit df['col'].apply(lambda x: f\"str{x}\")\n117 ms \u00b1 451 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n%timeit 'str' + df['col'].astype(str)\n112 ms \u00b1 1.04 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\nUsing format, however, is indeed far slower:\n%timeit df['col'].apply(lambda x: \"{}{}\".format('str', x))\n185 ms \u00b1 1.07 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n;;;If you load you table file with dtype=str \nor convert column type to string df['a'] = df['a'].astype(str) \nthen you can use such approach:\ndf['a']= 'col' + df['a'].str[:]\n\nThis approach allows prepend, append, and subset string of df.\nWorks on Pandas v0.23.4, v0.24.1. Don't know about earlier versions.\n;;;Another solution with .loc:\ndf = pd.DataFrame({'col': ['a', 0]})\ndf.loc[df.index, 'col'] = 'string' + df['col'].astype(str)\n\nThis is not as quick as solutions above (>1ms per loop slower) but may be useful in case you need conditional change, like:\nmask = (df['col'] == 0)\ndf.loc[mask, 'col'] = 'string' + df['col'].astype(str)\n\n;;;You can use pandas.Series.map :\ndf['col'].map('str{}'.format)\n\nIn this example, it will apply the word str before all your values.\n;;;Contributing to prefixing columns while controlling NaNs for things like human readable values on csv export.\n\"_\" + df['col1'].replace(np.nan,'').astype(str)\nExample:\nimport sys\nimport platform\nimport pandas as pd\nimport numpy as np\n\nprint(\"python {}\".format(platform.python_version(), sys.executable))\nprint(\"pandas {}\".format(pd.__version__))\nprint(\"numpy {}\".format(np.__version__))\n\ndf = pd.DataFrame({\n    'col1':[\"1a\",\"1b\",\"1c\",np.nan],\n    'col2':[\"2a\",\"2b\",np.nan,\"2d\"], \n    'col3':[31,32,33,34],\n    'col4':[np.nan,42,43,np.nan]})\n\ndf['col1_prefixed'] = \"_\" + df['col1'].replace(np.nan,'no value').astype(str)\ndf['col4_prefixed'] = \"_\" + df['col4'].replace(np.nan,'no value').astype(str)\n\nprint(df)\n\npython 3.7.3\npandas 1.2.3\nnumpy 1.18.5\n  col1 col2  col3  col4 col1_prefixed col4_prefixed\n0   1a   2a    31   NaN           _1a     _no value\n1   1b   2b    32  42.0           _1b         _42.0\n2   1c  NaN    33  43.0           _1c         _43.0\n3  NaN   2d    34   NaN     _no value     _no value\n\n(Sorry for the verbosity, I found this Q while working on an unrelated column type issue and this is my reproduction code)", "templates": []},
{"question_id": 12, "intent": "Pandas - replacing column values   https://stackoverflow.com/questions/31888871", "package": [], "tests cases": [["[ ]", ""]], "labels": [], "usability": ["yes"], "code": "Yes, you are using it incorrectly, Series.replace() is not inplace operation by default, it returns the replaced dataframe/series, you need to assign it back to your dataFrame/Series for its effect to occur. Or if you need to do it inplace, you need to specify the inplace keyword argument as True Example -\ndata['sex'].replace(0, 'Female',inplace=True)\ndata['sex'].replace(1, 'Male',inplace=True)\n\nAlso, you can combine the above into a single replace function call by using list for both to_replace argument as well as value argument , Example -\ndata['sex'].replace([0,1],['Female','Male'],inplace=True)\n\nExample/Demo -\nIn [10]: data = pd.DataFrame([[1,0],[0,1],[1,0],[0,1]], columns=[\"sex\", \"split\"])\n\nIn [11]: data['sex'].replace([0,1],['Female','Male'],inplace=True)\n\nIn [12]: data\nOut[12]:\n      sex  split\n0    Male      0\n1  Female      1\n2    Male      0\n3  Female      1\n\n\nYou can also use a dictionary, Example -\nIn [15]: data = pd.DataFrame([[1,0],[0,1],[1,0],[0,1]], columns=[\"sex\", \"split\"])\n\nIn [16]: data['sex'].replace({0:'Female',1:'Male'},inplace=True)\n\nIn [17]: data\nOut[17]:\n      sex  split\n0    Male      0\n1  Female      1\n2    Male      0\n3  Female      1\n\n;;;You can also try using apply with get method of dictionary, seems to be little faster than replace:\ndata['sex'] = data['sex'].apply({1:'Male', 0:'Female'}.get)\n\nTesting with timeit:\n%%timeit\ndata['sex'].replace([0,1],['Female','Male'],inplace=True)\n\nResult:\nThe slowest run took 5.83 times longer than the fastest. This could mean that an intermediate result is being cached.\n1000 loops, best of 3: 510 \u00b5s per loop\n\nUsing apply:\n%%timeit\ndata['sex'] = data['sex'].apply({1:'Male', 0:'Female'}.get)\n\nResult:\nThe slowest run took 5.92 times longer than the fastest. This could mean that an intermediate result is being cached.\n1000 loops, best of 3: 331 \u00b5s per loop\n\nNote: apply with dictionary should be used if all the possible values of the columns in the dataframe are defined in the dictionary else, it will have empty for those not defined in dictionary. \n;;;Can try this too!\nCreate a dictionary of replacement values.\nimport pandas as pd\ndata = pd.DataFrame([[1,0],[0,1],[1,0],[0,1]], columns=[\"sex\", \"split\"])\n\n\nreplace_dict= {0:'Female',1:'Male'}\nprint(replace_dict)\n\n\nUse the map function for replacing values\ndata['sex']=data['sex'].map(replace_dict)\n\nOutput after replacing", "templates": []},
{"question_id": 13,"intent": "Sort a nested list by two elements ", "code": "https://stackoverflow.com/questions/34705205", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "list", "sorting"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/34705205", "id_so": 34705205, "type": "SO_mined"},
  {"question_id": 14,"intent": "Converting byte string in unicode string", "code": " https://stackoverflow.com/questions/13837848", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "string", "unicode", "python-3.x", "type-conversion"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/13837848", "id_so": 13837848, "type": "SO_mined"},
  {"question_id": 15,"intent": "How to count all elements in a nested dictionary?   ", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/4581646", "id_so": 4581646, "type": "SO_mined", "code": "https://stackoverflow.com/questions/4581646"},
    {"question_id": 16,"intent": "regex for repeating words in a string in Python", "code": "https://stackoverflow.com/questions/25474338", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "regex"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/25474338", "id_so": 25474338, "type": "SO_mined"},
  {"question_id": 17,"intent": "Ordering a list of dictionaries in python ", "code": "https://stackoverflow.com/questions/861190", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "list", "dictionary"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/861190", "id_so": 861190, "type": "SO_mined"},
  {"question_id": 18,"intent": "How to zip lists in a list", "code": "https://stackoverflow.com/questions/4112265", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "functional-programming"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/4112265", "id_so": 4112265, "type": "SO_mined"},
  {"question_id": 19,"intent": "Clamping floating numbers in Python? ", "code": "https://stackoverflow.com/questions/9775731", "package": [], "labels": [], "tests cases": [], "templates": [], "tags": ["python", "math", "clamp"], "usability": ["yes"], "url": "https://stackoverflow.com/questions/9775731", "id_so": 9775731, "type": "SO_mined"},

]


  }

